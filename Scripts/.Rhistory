example(llfunc1); catch; catch1
example(llfunc1); catch; catch1
example(llfunc1); catch; catch1
q()
example(llfunc1); catch; catch1
library(SAFR); example(llfunc1)
library(SAFR); example(llfunc1)
library(SAFR); example(llfunc1)
library(SAFR); example(llfunc1)
library(SAFR); example(llfunc1)
library(SAFR); example(llfunc1)
library(SAFR); example(llfunc1)
library(SAFR); example(llfunc1)
catch; catch1;
1e-4 * sum(catch)
q()
library(SAFR); example(llfunc1)
library(SAFR); example(llfunc1)
library(SAFR); example(llfunc1)
library(SAFR); example(llfunc1)
ap <- max( min(which(catch < (0.0001 * sum(catch)) )), catch[11])
min(which(catch < (0.0001 * sum(catch)) ))
if((0.0001 * sum(catch)) < catch[11], 11, min(which(catch < (0.0001 * sum(catch)) ))) 
if(0.0001 * sum(catch)) < catch[11], 11, min(which(catch < (0.0001 * sum(catch)) ))) 
ifelse( (0.0001 * sum(catch)) < catch[11], 11, min(which(catch < (0.0001 * sum(catch)) ))) 
ifelse( (0.0001 * sum(catch)) < catch[11], 11, min(which(catch < (0.01 * sum(catch)) ))) 
ifelse( (0.01 * sum(catch)) < catch[11], 11, min(which(catch < (0.01 * sum(catch)) ))) 
(0.01 * sum(catch))
catch[1]]
catch[11]
q()
library(SAFR); example(llfunc1); length(catch) == length(catch1)
library(SAFR); example(llfunc1); length(catch) == length(catch1)
library(SAFR); example(llfunc1); length(catch) == length(catch1)
library(SAFR); example(llfunc1); length(catch) == length(catch1)
library(SAFR); example(llfunc1); length(catch) == length(catch1)
library(SAFR); example(llfunc1); length(catch) == length(catch1)
catch
library(SAFR); example(llfunc1); length(catch) == length(catch1)
catch; catch1
library(SAFR); example(llfunc1); length(catch) == length(catch1); catch; catch1
q()
library(SAFR)
library(SAFR); example(llfunc1); length(catch) == length(catch1); catch; catch1
q()
library(SAFR); example(llfunc1); length(catch) == length(catch1); catch; catch1
library(SAFR); example(llfunc1); length(catch) == length(catch1);
q()
library(SAFR); example(llfunc1); length(catch) == length(catch1);
library(SAFR); example(llfunc1); length(catch) == length(catch1);
library(SAFR); example(llfunc1); length(catch) == length(catch1);
library(SAFR); example(llfunc1); length(catch) == length(catch1);
library(SAFR); example(llfunc1); length(catch) == length(catch1);
library(SAFR); example(llfunc1); length(catch) == length(catch1);
catch
library(SAFR); example(llfunc1); length(catch) == length(catch1);
library(SAFR); example(llfunc1); length(catch) == length(catch1);
library(SAFR); example(llfunc1); length(catch) == length(catch1);
library(SAFR); example(llfunc1); length(catch) == length(catch1);
catch; catch1
library(SAFR); example(llfunc1); length(catch) == length(catch1);
library(SAFR); example(llfunc1); length(catch) == length(catch1);
catch
catch1
example(llfunc7)
example(llfunc5)
sim$catch
example(llfunc4)
example(llfunc3)
sim$catch
example(llfunc3)
sim <- GenerateData2(max.age = max.age, nb.of.cohort = 30)
result <- optim(par = c(0.2,1), fn = llfunc3, catch = sim$catch, effort = sim$effort, catchability.scaling.factor = 1e-4, selectivity.at.age =  c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1), hessian = TRUE)
errors <- sqrt(diag(solve(result$hessian)))
print(paste("Estimated catchability is", round(result$par[1],3), "+-", round(errors[1],3), " x 10^-4"))
print(paste("Estimated M is", round(result$par[2],3), "+-", round(errors[2],3)))
sim$catch
q()
source(SAFR)
library(SAFR)
example(llfunc3)
example(llfunc3)
example(llfunc3)
sim$catch
example(llfunc3)
example(llfunc3)
sim$catch
q()
library(SAFR)
example(llfunc3)
sim$catch
example(llfunc3)
head(sim$catch)
sim$effort
q()
library(SAFR)
example(llfunc3)
result1
q()
library(SAFR)
example(llfunc3)
example(llfunc3)
example(my.cumsum)
?my.cumsum
my.cumsum(matrix(1, ncol = 3, nrow=2))
my.cumsum(matrix(1, ncol = 3, nrow=2)) - matrix(1, ncol = 3, nrow=2)
q()
library(SAFR)
example(llfunc3)
q()
library(SAFR)
example(llfunc3)
q()
library(SAFR)
example(llfunc3)
q()
library(SAFR)
example(llfunc3)
catch1
library(SAFR)
example(llfunc3)
dim(catch1)
length(c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = ap - 4), 1,1))
dim(effort1)
q()
library(SAFR)
example(llfunc3)
q()
library(SAFR)
example(llfunc3)
q()
library(SAFR)
example(llfunc3)
head(sim$catch)
head(catch1)
result1
result
example(llfunc3)
optim(par = c(0.2,1), fn = llfunc3, catch = catch1, effort = effort1, catchability.scaling.factor = 1e-4, selectivity.at.age =  c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = ap - 4), 1,1))
catch1 <- sim$catch[,1:ap];
optim(par = c(0.2,1), fn = llfunc3, catch = catch1, effort = effort1, catchability.scaling.factor = 1e-4, selectivity.at.age =  c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = ap - 4), 1,1))
head(effort1)
head(sim$effort)
q()
library(SAFR)
example(llfunc3)
catch1 <- sim$catch[,1:ap]; effort1 <- sim$effort[,1:ap];
optim(par = c(0.2,1), fn = llfunc3, catch = catch1, effort = effort1, catchability.scaling.factor = 1e-4, selectivity.at.age =  c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = ap - 4), 1,1), plus.group = TRUE, hessian = TRUE)
q()
library(SAFR)
example(llfunc3)
example(llfunc3)
head(catch1)
head(sim$catch)
example(llfunc3)
q()
library(SAFR)
example(llfunc3)
head(sim$catch)
q()
library(SAFR)
example(llfunc3)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
catch
q()
library(SAFR)
example(llfunc3)
optim(par = c(0.2,1), fn = llfunc3, catch = catch1, effort = effort1, catchability.scaling.factor = 1e-4, selectivity.at.age =  c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = ap - 4), 1,1))
q()
library(SAFR)
example(llfunc3)
head(catch1)
example(llfunc3)
q()
library(SAFR)
example(llfunc3)
example(llfunc3)
q()
library(SAFR)
example(llfunc3)
q()
library(SAFR)
example(llfunc3)
example(llfunc3)
q()
library(SAFR); example(llfunc3)
q()
library(SAFR); example(llfunc3)
head(sim$catch)
library(SAFR); example(llfunc3)
q()
library(SAFR); example(llfunc3)
library(SAFR); example(llfunc3)
q()
library(SAFR); example(llfunc3)
library(SAFR); example(llfunc3)
q()
library(SAFR); example(llfunc3)
q()
library(SAFR); example(llfunc3)
q()
library(SAFR); example(llfunc3)
c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4)
)
c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1)
c(0,0,seq(1/(ap - 3), (ap - 4)/(ap - 3), length = ap - 4), 1,1)
q()
library(SAFR); example(llfunc3)
library(SAFR); example(llfunc3)
q()
library(SAFR); example(llfunc3)
library(SAFR); example(llfunc3)
head(sim$catch)
head(catch1)
library(SAFR); example(llfunc3)
library(SAFR); example(llfunc3)
dim(sim$catch) == dim(catch1)
q()
library(SAFR); example(llfunc3)
head(sim$catch)
library(SAFR); example(llfunc3)
head(sim$catch)
source("SimulationFunctions.R")
source("SimulationStudy.R")
source("SimulationStudy.R")
source("SimulationStudy.R")
names(tmp0)
tmp0$nb.at.age.sample
plot(log(tmp0$nb.at.age.sample[1,]))
plot(log(tmp0$nb.at.age.sample[2,]))
plot(log(tmp0$nb.at.age.sample[3,]))
source("SimulationStudy.R")
plot(log(tmp0$nb.at.age.sample[3,]))
tmp0$nb.at.age.sample
tmp1$nb.at.age.sample
source("SimulationStudy.R")
tmp1$nb.at.age.sample
plot(log(tmp0$nb.at.age.sample[3,]))
source("SimulationStudy.R")
tmp1$nb.at.age.sample
tmp0$population$Nat.Mort
tmp0$population$catchability
names(tmp0)
source("SimulationStudy.R")
tmp0$population$Nat.Mort
tmp1$nb.at.age.sample
library(SAFR)
example(llfunc4)
example(llfunc3)
example(llfunc3)
example(llfunc3)
set.seed(3)
example(llfunc3)
GenerateData2
example(llfunc3)
example(llfunc2)
example(llfunc2)
example(llfunc3)
sim$catch
example(llfunc7)
example(llfunc4)
example(llfunc1)
example(llfunc2)
example(llfunc2)
example(llfunc2)
example(llfunc3)
c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1)
 c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1)
q()
library(SAFR); example(llfunc3)
 c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1)
sim$catch
optim(par = c(0.2,1), fn = llfunc3, catch = sim$catch, effort = sim$effort, catchability.scaling.factor = 1e-4, selectivity.at.age =  c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1), hessian = TRUE)
optim(par = c(0.4,4), fn = llfunc3, catch = sim$catch, effort = sim$effort, catchability.scaling.factor = 1e-4, selectivity.at.age =  c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1), hessian = TRUE)
sim$effort
c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1)
example(llfunc3)
q()
library(SAFR); example(llfunc3)
dim(catch1); dim(catch)
dim(catch1); dim(sim$catch)
head(sim$catch)
library(SAFR); example(llfunc3)
q()
library(SAFR); example(llfunc3)
q()
library(SAFR); example(llfunc3)
dim(sim$catch)
q()
library(SAFR); example(llfunc3)
dim(sim$catch)
q()
library(SAFR); example(llfunc3)
q()
library(SAFR); example(llfunc3)
q()
library(SAFR); example(llfunc3)
q()
library(SAFR); example(llfunc3)
q()
library(SAFR); example(llfunc3)
set.seed(2)
sim <- GenerateData2(max.age = max.age, nb.of.cohort = 30) # Generate catch using gear selectivity
set.seed(3)
sim <- GenerateData2(max.age = max.age, nb.of.cohort = 30) # Generate catch using gear selectivity
optim(par = c(0.2,1), fn = llfunc3, catch = sim$catch, effort = sim$effort, catchability.scaling.factor = 1e-4, selectivity.at.age =  c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1), hessian = TRUE)
q()
library(SAFR); example(llfunc3)
q()
version()
library(SAFR); example(llfunc3)
sim$catch
library(SAFR); example(llfunc3)
llfunc3
load(file="/media/mkienzle/POCKET/sim.R")
sim
result <- optim(par = c(0.2,1), fn = llfunc3, catch = sim$catch, effort = sim$effort, catchability.scaling.factor = 1e-4, selectivity.at.age =  c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1), hessian = TRUE)
max.age <- 9
result <- optim(par = c(0.2,1), fn = llfunc3, catch = sim$catch, effort = sim$effort, catchability.scaling.factor = 1e-4, selectivity.at.age =  c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1), hessian = TRUE)
result
q()
library(SAFR); example(llfunc3)
example(llfunc3)
set.seed(3); runif(1, min = 1, max = 10)
rm(list = ls())
source("SAFR/R/GenerateData2.R")
set.seed(3)
sim <- GenerateData2(max.age = 9, nb.of.cohort = 30)
library(SAFR)
example(llfunc3)
library(SAFR); example(llfunc3)
library(SAFR); example(llfunc3)
sim$catch
library(SAFR); example(llfunc3)
sim$catch
library(SAFR); example(llfunc3)
sim$catch
library(SAFR); example(llfunc3)
sim$catch
round(sim$catch)
dim(sim$catch)
library(SAFR); example(llfunc3)
dim(catch1); dim(sim$catch)
library(SAFR); example(llfunc3)
library(SAFR); example(llfunc3)
dim(catch1); dim(sim$catch)
head(catch1)
library(SAFR); example(llfunc3)
library(SAFR); example(llfunc3)
dim(catch1); dim(sim$catch)
head(catch1)
head(sim$catch)
library(SAFR); example(llfunc3)
set.seed(11)
sim <- GenerateData2(max.age = max.age, nb.of.cohort = 75)
head(sim$catch)
set.seed(12)
sim <- GenerateData2(max.age = max.age, nb.of.cohort = 75)
head(sim$catch)
library(SAFR); example(llfunc3)
head(catch1)
ap <- 16
catch1 <- sim$catch[,1:ap]; catch1[,ap] <- rowSums(sim$catch[,ap:max.age])
effort1 <- sim$effort[,1:ap];
result1 <- optim(par = c(0.2,1), fn = llfunc3, catch = catch1, effort = effort1, catchability.scaling.factor = 1e-4, selectivity.at.age =  c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1)[1:ap], plus.group = TRUE, hessian = TRUE)
errors1 <- sqrt(diag(solve(result1$hessian)))
print(paste("Estimated catchability is", round(result1$par[1],3), "+-", round(errors1[1],3), " x 10^-4"))
head(catch1)
ap <- 17
catch1 <- sim$catch[,1:ap]; catch1[,ap] <- rowSums(sim$catch[,ap:max.age])
effort1 <- sim$effort[,1:ap];
result1 <- optim(par = c(0.2,1), fn = llfunc3, catch = catch1, effort = effort1, catchability.scaling.factor = 1e-4, selectivity.at.age =  c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1)[1:ap], plus.group = TRUE, hessian = TRUE)
errors1 <- sqrt(diag(solve(result1$hessian)))
print(paste("Estimated catchability is", round(result1$par[1],3), "+-", round(errors1[1],3), " x 10^-4"))
ap <- 18
ap <- 20
catch1 <- sim$catch[,1:ap]; catch1[,ap] <- rowSums(sim$catch[,ap:max.age])
effort1 <- sim$effort[,1:ap];
result1 <- optim(par = c(0.2,1), fn = llfunc3, catch = catch1, effort = effort1, catchability.scaling.factor = 1e-4, selectivity.at.age =  c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1)[1:ap], plus.group = TRUE, hessian = TRUE)
errors1 <- sqrt(diag(solve(result1$hessian)))
print(paste("Estimated catchability is", round(result1$par[1],3), "+-", round(errors1[1],3), " x 10^-4"))
head(catch1)
head(sim$catch)
library(SAFR); example(llfunc3)
sim$catch[,20]
sim$catch[,18]
sim$catch[,15]
sim$catch[,18]
ap <- 18
catch1 <- sim$catch[,1:ap]; catch1[,ap] <- rowSums(sim$catch[,ap:max.age])
effort1 <- sim$effort[,1:ap];
result1 <- optim(par = c(0.2,1), fn = llfunc3, catch = catch1, effort = effort1, catchability.scaling.factor = 1e-4, selectivity.at.age =  c(0,0,seq(1/(max.age - 3), (max.age - 4)/(max.age - 3), length = max.age - 4), 1,1)[1:ap], plus.group = TRUE, hessian = TRUE)
errors1 <- sqrt(diag(solve(result1$hessian)))
print(paste("Estimated catchability is", round(result1$par[1],3), "+-", round(errors1[1],3), " x 10^-4"))
library(SAFR); example(llfunc3)
library(SAFR); example(llfunc3)
dim(sim$catch)
q()
library(SAFR); example(llfunc3)
library(SAFR); example(llfunc3)
library(SAFR); example(llfunc3)
example(llfunc4)
library(SAFR); example(llfunc4)
library(SAFR); example(llfunc4)
nb.at.age.sample
library(SAFR); example(llfunc4)
population$catch
nb.at.age.sample
rowSums(population$catch)
result2 <- optim(par = c(0.2,1, c(rep(1e-12,5), rep(1, max.age-5))), fn = llfunc4, catch = population$catch, effort = population$effort, catchability.scaling.factor = 1e-4, method = c("L-BFGS-B"),
lower = c(5e-2,5e-2, rep(1e-12, max.age)), upper = c(10,0.5, rep(1, max.age)), hessian = TRUE, control = list(maxit = 1e3))
 errors2 <- sqrt(abs(diag(solve(result2$hessian))))
print(cbind("Estimate" = result2$par, "Error" = errors2))
rowSums(nb.at.age.sample)
library(SAFR); example(llfunc4)
q()
library(SAFR); example(llfunc4)
population$catch
population
nb.at.age.sample
rowSums(nb.at.age.sample)
sum(nb.at.age.sample)
library(SAFR); example(llfunc4)
head(population$catch)
q()
library(SAFR);
set.seed(3)
max.age <- 9
nb.of.cohort <- 30
population <- GenerateData2(max.age = max.age, nb.of.cohort = nb.of.cohort) # Generate catch using gear selectivity
head(population$catch)
rm(list=ls())
library(SAFR);
set.seed(3)
max.age <- 9
nb.of.cohort <- 30
population <- GenerateData2(max.age = max.age, nb.of.cohort = nb.of.cohort) # Generate catch using gear selectivity
head(population$catch)
rm(list = ls()); library(SAFR); example(llfunc4)
result2 <- optim(par = c(2,0.2, c(rep(1e-12,5), rep(1, max.age-5))), fn = llfunc4, catch = nb.at.age.sample, effort = population$effort, catchability.scaling.factor = 1e-4, method = c("L-BFGS-B"),
lower = c(5e-2,5e-2, rep(1e-12, max.age)), upper = c(10,0.5, rep(1, max.age)), hessian = TRUE, control = list(maxit = 1e3))
result2
errors2 <- sqrt(abs(diag(solve(result2$hessian))))
print(cbind("Estimate" = result2$par, "Error" = errors2))
result2 <- optim(par = c(2,0.2, c(rep(1e-12,5), rep(1, max.age-5))), fn = llfunc4, catch = nb.at.age.sample, effort = population$effort, catchability.scaling.factor = 1e-4, method = c("L-BFGS-B"),
lower = c(5e-2,0.2, rep(1e-12, max.age)), upper = c(10,0.2, rep(1, max.age)), hessian = TRUE, control = list(maxit = 1e3))
result2 <- optim(par = c(2,0.2, c(rep(1e-12,5), rep(1, max.age-5))), fn = llfunc4, catch = nb.at.age.sample, effort = population$effort, catchability.scaling.factor = 1e-4, method = c("L-BFGS-B"),
lower = c(5e-2,0.18, rep(1e-12, max.age)), upper = c(10,0.22, rep(1, max.age)), hessian = TRUE, control = list(maxit = 1e3))
result2
result2 <- optim(par = c(2,0.2, c(rep(1e-12,5), rep(1, max.age-5))), fn = llfunc4, catch = nb.at.age.sample, effort = population$effort, catchability.scaling.factor = 1e-4, method = c("L-BFGS-B"),
lower = c(5e-2,0.20, rep(1e-12, max.age)), upper = c(10,0.24, rep(1, max.age)), hessian = TRUE, control = list(maxit = 1e3))
result2
head(nb.at.age.sample)
head(population$catch)
result2 <- optim(par = c(2,0.2, c(rep(1e-12,5), rep(1, max.age-5))), fn = llfunc4, catch = nb.at.age.sample, effort = population$effort, catchability.scaling.factor = 1e-4, method = c("L-BFGS-B"),
lower = c(5e-2,0.20, rep(1e-12, max.age-2),0.99), upper = c(10,0.24, rep(1, max.age-2),1.01, 1.01), hessian = TRUE, control = list(maxit = 1e3))
result2
errors2 <- sqrt(abs(diag(solve(result2$hessian))))
print(cbind("Estimate" = result2$par, "Error" = errors2))
max.age <- 9
nb.of.cohort <- 30
population <- GenerateData2(max.age = max.age, nb.of.cohort = nb.of.cohort) # Generate catch using gear selectivity
# sample a fix number of fish each years
n.sample.per.year <- 1e4
nb.at.age.sample <- draw.sample(population$catch, sample.size = n.sample.per.year * (nb.of.cohort + 1 - max.age))
# Estimate parameters
result2 <- optim(par = c(0.2,1, c(rep(1e-12,5), rep(1, max.age-5))), fn = llfunc4, catch = nb.at.age.sample, effort = population$effort, catchability.scaling.factor = 1e-4, method = c("L-BFGS-B"),
       lower = c(5e-2,5e-2, rep(1e-12, max.age)), upper = c(10,0.5, rep(1, max.age)), hessian = TRUE, control = list(maxit = 1e3))
errors2 <- sqrt(abs(diag(solve(result2$hessian))))
print(cbind("Estimate" = result2$par, "Error" = errors2))
set.seed(3)
max.age <- 9
nb.of.cohort <- 50
population <- GenerateData2(max.age = max.age, nb.of.cohort = nb.of.cohort) # Generate catch using gear selectivity
# sample a fix number of fish each years
n.sample.per.year <- 1e4
nb.at.age.sample <- draw.sample(population$catch, sample.size = n.sample.per.year * (nb.of.cohort + 1 - max.age))
# Estimate parameters
result2 <- optim(par = c(0.2,1, c(rep(1e-12,5), rep(1, max.age-5))), fn = llfunc4, catch = nb.at.age.sample, effort = population$effort, catchability.scaling.factor = 1e-4, method = c("L-BFGS-B"),
       lower = c(5e-2,5e-2, rep(1e-12, max.age)), upper = c(10,0.5, rep(1, max.age)), hessian = TRUE, control = list(maxit = 1e3))
errors2 <- sqrt(abs(diag(solve(result2$hessian))))
print(cbind("Estimate" = result2$par, "Error" = errors2))
example(llfunc5)
q()
rm(list = ls()); library(SAFR); example(llfunc5)
head(sim$catch)
q()
rm(list = ls()); library(SAFR); example(llfunc5)
q()
rm(list = ls()); library(SAFR); example(llfunc5)
q()
rm(list = ls()); library(SAFR); example(llfunc7)
rm(list = ls()); library(SAFR); example(llfunc7)
rm(list = ls()); library(SAFR); example(llfunc7)
population <- GenerateData3(max.age = max.age, nb.of.cohort = nb.of.cohort, verbose = T)
rm(list = ls()); library(SAFR); example(llfunc7)
rm(list = ls()); library(SAFR); example(llfunc7)
rm(list = ls()); library(SAFR); example(llfunc7)
q()
rm(list = ls()); library(SAFR); example(llfunc7)
