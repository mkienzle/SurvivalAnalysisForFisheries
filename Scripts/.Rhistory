multinom.lik(10e3)
multinom.lik(N0)
multinom.lik(N0-10)
multinom.lik(N0-10)
multinom.lik(N0-1e3)
N0
multinom.lik(N0-500)
source("test2.R")
multinom.lik(N0)
multinom.lik(N0-500)
multinom.lik(N0+500)
multinom.lik(N0+1e3)
optim(par = c(9e3), fn = multinom, method = "Brent", lower = 8e3, upper = 12e3 )
optim(par = c(9e3), fn = multinom.lik, method = "Brent", lower = 8e3, upper = 12e3 )
source("test2.R")
optim(par = c(9e3), fn = multinom.lik, method = "Brent", lower = 8e3, upper = 12e3 )
N0
?optim
optim(par = c(9e3), fn = multinom.lik, method = "Brent", lower = 8e3, upper = 12e3, control = list(hessian = TRUE) )
?optim
optim(par = c(9e3), fn = multinom.lik, method = "Brent", lower = 8e3, upper = 12e3, hessian = TRUE)
res <- optim(par = c(9e3), fn = multinom.lik, method = "Brent", lower = 8e3, upper = 12e3, hessian = TRUE); solve(res$hessian)
res <- optim(par = c(9e3), fn = multinom.lik, method = "Brent", lower = 8e3, upper = 12e3, hessian = TRUE); sqrt(diag(solve(res$hessian)))
N0
res <- optim(par = c(9e3), fn = multinom.lik, method = "Brent", lower = 8e3, upper = 12e3, hessian = TRUE); sqrt(((res$hessian)))
example(llfunc2)
N0
res <- optim(par = c(9e3), fn = multinom.lik, method = "Brent", lower = 8e3, upper = 12e3, hessian = TRUE); sqrt(((res$hessian)))
res$par
q()
library(SAFR)
source("SAFR/R/llfunc2bis.R")
q()
library(SAFR)
example(llfunc2bis")
example("llfunc2bis")
# Suppose age varies between 0 and 10
age <- seq(0,10)
# Generate a random natural mortality
M <- runif(1, min = 1e-2, max = 0.3)
effort <- runif(length(age)-1, min = 1e3, max = 2e3)
catchability <- runif(1, min = 1/3e3, max = 1/2e3)
# Catchability scaling factor
csf <- 1e-4
F <-  catchability * effort
print(paste("Simulated q is", round(catchability / csf,3), as.character(csf)))
print(paste("Simulated M is ", round(M,3)))
N0 <- runif(1, min = 4e3, max = 1e4)
print(paste("Simulated recruitment is", round(N0)))
# Calculate number at age using a simple exponential model ( see Quinn and Deriso, 1999)
nb.at.age <- cbind(age, N0 * exp(-c(0, cumsum(M + F))))
# Calculate the total number of individual dying at age
total.death <- N0 * (exp(-c(0,cumsum(M+F)[-length(effort)])) - exp(-cumsum(M+F)))
# Number of fish dying from fishing is a fraction of total mortality
catch <- F/(M+F) * total.death
# Estimate q and M
best.qM.est <- optim(par = c(10,1, 2*sum(catch)), fn = llfunc2, catch = catch, effort
= effort, catchability.scaling.factor = csf, hessian = TRUE)
best.qM.est
N0
sum(catch)
best.qM.est <- optim(par = c(10,1, 1.2*sum(catch)), fn = llfunc2, catch = catch, effort
= effort, catchability.scaling.factor = csf, hessian = TRUE)
best.qM.est <- optim(par = c(10,1, 1.2*sum(catch)), fn = llfunc2, catch = catch, effort
= effort, catchability.scaling.factor = csf, hessian = TRUE)
source("SAFR/R/llfunc2bis.R")
best.qM.est <- optim(par = c(10,1, 1.2*sum(catch)), fn = llfunc2, catch = catch, effort
= effort, catchability.scaling.factor = csf, hessian = TRUE)
# Estimate q and M
lower.bound <- c(0.1,1e-2,sum(catch))
upper.bound <- c(1e2, 1, 2 * sum(catch))
best.qM.est <- optim(par = c(5, 0.5, 2*sum(catch)), lower = lower.bound, upper = upper.bound, fn = llfunc2, catch = catch, effort
= effort, catchability.scaling.factor = csf, method = c("L-BFGS-B"), hessian = TRUE)
M
N0
q
catchability
sum(catch)
source("SAFR/R/llfunc2bis.R")
best.qM.est <- optim(par = c(5, 0.5, 2*sum(catch)), lower = lower.bound, upper = upper.bound, fn = llfunc2, catch = catch, effort
= effort, catchability.scaling.factor = csf, method = c("L-BFGS-B"), hessian = TRUE)
M
source("SAFR/R/llfunc2bis.R")
best.qM.est <- optim(par = c(5, 0.5, 2*sum(catch)), lower = lower.bound, upper = upper.bound, fn = llfunc2, catch = catch, effort
= effort, catchability.scaling.factor = csf, method = c("L-BFGS-B"), hessian = TRUE)
catchability
source("SAFR/R/llfunc2bis.R")
best.qM.est <- optim(par = c(5, 0.5, 2*sum(catch)), lower = lower.bound, upper = upper.bound, fn = llfunc2, catch = catch, effort
= effort, catchability.scaling.factor = csf, method = c("L-BFGS-B"), hessian = TRUE)
source("SAFR/R/llfunc2bis.R")
# Estimate q and M
lower.bound <- c(0.1,1e-2,sum(catch))
upper.bound <- c(1e2, 1, 2 * sum(catch))
best.qM.est <- optim(par = c(5, 0.5, 2*sum(catch)), lower = lower.bound, upper = upper.bound, fn = llfunc2, catch = catch, effort
= effort, catchability.scaling.factor = csf, method = c("L-BFGS-B"), hessian = TRUE)
No
N0
example(llfunc2)
q()
library(SAFR)
example(llfunc2)
llfunc2
q()
library(SAFR)
llfunc2bis
llfunc2
q()
library(SAFR)
llfunc2
library(SAFR)
llfunc2
llfunc2bis
rm(list = ls())
library(SAFR)
llfunc2
example("llfunc2")
example("llfunc2bis")
q()
library(SAFR)
example("llfunc2bis")
M
example("llfunc2")
source("testbis.R")
N0
source("testbis.R")
source("testbis.R")
N0
best.qM.est
N0!
fact(N0)
factorial(N0)
sum(log(seq(1, N0)))
sum(log(seq(1, N0 - sum(catch))))
N0
sum(catc)
sum(catch)
source("testbis.R")
N0
source("testbis.R")
source("testbis.R")
source("testbis.R")
source("testbis.R")
source("testbis.R")
source("testbis.R")
source("testbis.R")
source("testbis.R")
source("testbis.R")
source("testbis.R")
source("testbis.R")
prob.for.llfunc2(c(0.3, 3/3e3/csf), effort, catchability.scaling.factor)
prob.for.llfunc2(c(0.3, 3/3e3/csf), effort, 1e-4)
source("testbis.R")
prob.for.llfunc2(c(0.3, 3/3e3/csf), effort, 1e-4)
catch
source("testbis.R")
prob.for.llfunc2(c(0.3, 3/3e3/csf), effort, 1e-4)
example("llfunc2")
source("testbis.R")
catch
N0
sum(catch)
source("testbis.R")
source("testbis.R")
source("testbis.R")
N0
source("testbis.R")
source("testbis.R")
source("testbis.R")
source("testbis.R")
N0
source("testbis.R")
source("testbis.R")
source("testbis.R")
catch
source("testbis.R")
catch
sum(catch) == N0
?similar
??similar
help("almost equal")
??almost equal
all.equal(sum(catch) == N0)
all.equal(sum(catch), N0)
source("testbis.R")
source("testbis.R")
prob.for.llfunc2(c(0, 1/3e3/csf), effort, catchability.scaling.factor)
prob.for.llfunc2(c(0, 1/3e3/csf), effort, csf)
prob.for.llfunc2(c(0.1, 1/3e3/csf), effort, csf)
source("testbis.R")
N0
source("testbis.R")
N0
source("testbis.R")
N0
source("testbis.R")
sum(catch)
source("testbis.R")
N0
source("testbis.R")
N0
source("testbis.R")
N0
catch
sum(catch)
source("testbis.R")
N0
sum(catch)
source("testbis.R")
N0
sum(catch)
catch
source("testbis.R")
N0
source("testbis.R")
N0
source("testbis.R")
N0
source("testbis.R")
N0
N0
source("testbis.R")
N0
library(SAFR)
example(llfunc1)
print(rec.est)
N0
result
Z
M+F
result$par
library(SAFR); example(llfunc1)
q()
library(SAFR); example(llfunc1)
q()
library(SAFR); example(llfunc1)
q()
library(SAFR); example(llfunc1)
q()
library(SAFR); example(llfunc1)
N0
library(SAFR); example(llfunc1)
N0
q()
library(SAFR); example(llfunc1)
q()
library(SAFR); example(llfunc1)
q()
library(SAFR); example(llfunc1)
library(SAFR); example(llfunc1)
catch
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
example(llfunc1)
q()
library(SAFR); example(llfunc1)
q()
library(SAFR); example(llfunc1)
library(SAFR)
example(llfunc2)
example(llfunc2)
example(llfunc2)
example(llfunc2)
example(llfunc2)
example(llfunc2)
example(llfunc2)
q()
library(SAFR)
example(llfunc2)
example(llfunc2)
example(llfunc2)
example(llfunc2)
example(llfunc2)
q()
library(SAFR)
example(llfunc2)
q()y
q()
library(SAFR)
example(llfunc2)
example(llfunc2)
example(llfunc2)
example(llfunc7)
example(llfunc7)
example(llfunc7)
example(llfunc7)
q()
library(SAFR); example(llfunc7)
example(llfunc7)
q()
library(SAFR); example(llfunc7)
q()
library(SAFR); example(llfunc7)
catch.by.cohort
q()
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
prob.for.llfunc7(result$par, catch, effort, csf)
result$par
Caaa2Coaa(catch)
catch
prob.for.llfunc7(result$par, nb.sample.at.age, effort, csf)
prob.for.llfunc7(result$par, nb.at.age.sample, effort, csf)
Caaa2Coaa(nb.at.age.sample)
names(population)
population$effort
prob.for.llfunc7(result$par, nb.at.age.sample, population$effort, csf)
names(population)
prob.for.llfunc7(result$par, population$catch, population$effort, csf)
p
p <- prob.for.llfunc7(result$par, population$catch, population$effort, csf)
# An estimate of recruitment
rec <- rowSums(population$catch, na.rm = TRUE) / rowSums(p, na.rm = TRUE)
rowSums(population$catch, na.rm = TRUE)
dim(population$catch)
dim(p)
rec <- rowSums(Caaa2Coaa(population$catch), na.rm = TRUE) / rowSums(p, na.rm = TRUE)
rec
ind.rec <- Caaa2Coaa(population$catch) / p 
ind.re
ind.rec
names(populations)
names(population)
population$Recruitment
length(rec)
plot(rec, population$Rec)
dim(population$catch)
plot(rec[9:30], population$Rec[9:30])
plot(rec[9:30], population$Rec[9:30]); abline(0,1)
lm(population$Rec[9:30] ~ rec[9:30])
population(M)
population$M
population$F
csf
lm(population$Rec[9:30] ~ rec[9:30])
population$catch
p
rowSums(p)
result
q()
library(SAFR); example(llfunc7)
p
rowSums(p)
rowSums(p, na.rm = TRUE)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
lm(population$Rec[9:30] ~ rec[9:30]); abline(0,1)
plot(population$Rec[9:30] ~ rec[9:30]); abline(0,1)
example(llfunc7)
plot(population$Rec[9:30] ~ rec[9:30]); abline(0,1)
example(llfunc7)
plot(population$Rec[9:30] ~ rec[9:30]); abline(0,1)
rec
plot(population$Rec ~ rec); abline(0,1)
plot(population$Rec ~ rec); abline(0,1)
tmp
q()
library(SAFR); example(llfunc7)
prob.for.llfunc7(c(0.371, 5.3), catch, effort, csf)
prob.for.llfunc7(c(0.371, 5.3), population$catch, population$effort, csf)
source("SAFR/R/llfunc7.R")
prob.for.llfunc7(c(0.371, 5.3), population$catch, population$effort, csf)
source("SAFR/R/llfunc7.R")
prob.for.llfunc7(c(0.371, 5.3), population$catch, population$effort, csf)
source("SAFR/R/llfunc7.R")
prob.for.llfunc7(c(0.371, 5.3), population$catch, population$effort, csf)
prob.for.llfunc7(c(5.3, 0.371), population$catch, population$effort, csf)
head(population$catch)
head(population$effort)
objects()
names(population)
names(population$logistic.par)
population$logistic.par
prob.for.llfunc7(c(5.3, 0.371, logistic.par), population$catch, population$effort, csf)
prob.for.llfunc7(c(5.3, 0.371, population$logistic.par), population$catch, population$effort, csf)
source("SAFR/R/llfunc7.R"); prob.for.llfunc7(c(5.3, 0.371, population$logistic.par), population$catch, population$effort, csf)
cbind(1, matrix(4, ncol = 4, nrow = 2))
source("SAFR/R/llfunc7.R"); prob.for.llfunc7(c(5.3, 0.371, population$logistic.par), population$catch, population$effort, csf)
source("SAFR/R/llfunc7.R"); prob.for.llfunc7(c(5.3, 0.371, population$logistic.par), population$catch, population$effort, csf)
source("SAFR/R/llfunc7.R"); prob.for.llfunc7(c(5.3, 0.371, population$logistic.par), population$catch, population$effort, csf)
source("SAFR/R/llfunc7.R"); prob.for.llfunc7(c(5.3, 0.371, population$logistic.par), population$catch, population$effort, csf)
q()
library(SAFR); example(llfunc7)
result
res
q()
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
q()
library(SAFR); example(llfunc7)
q()
library(SAFR); example(llfunc7)
res
q()
library(SAFR); example(llfunc7)
q()
library(SAFR); example(llfunc7)
q()
library(SAFR); example(llfunc7)
res
q()
library(SAFR); example(llfunc7)
ls
objects()
rm(list = ls())
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
q()
library(SAFR); example(llfunc7)
prob.for.llfunc7(c(5.3, 0.371, population$logistic.par), population$catch, population$effort, csf)
q()
library(SAFR); example(llfunc7)
rm(list = ls())
q()
q()
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
prob.for.llfunc7(result$par, population$catch, population$effort, csf)
population$catch / prob.for.llfunc7(result$par, population$catch, population$effort, csf)
Caaa2Coaa(population$catch) / prob.for.llfunc7(result$par, population$catch, population$effort, csf)
rec
rec.ind
ind.rec
plot(population$Rec ~ rec); abline(0,1)
plot(population$Rec[9:30] ~ rec[9:30]); abline(0,1)
library(SAFR); example(llfunc7)
plot(population$Rec[9:30] ~ rec[9:30]); abline(0,1)
library(SAFR); example(llfunc7)
plot(population$Rec[9:30] ~ rec[9:30]); abline(0,1)
rec
ind.rec
outer(rec, rep(1, ncol(ind.rec))
)
1/ncol(ind.rec) * sum((ind.rec - outer(rec, rep(1, ncol(ind.rec))))^2)
1/ncol(ind.rec) * sum((ind.rec - outer(rec, rep(1, ncol(ind.rec))))^2, na.rm = T)
1/ncol(ind.rec) * rowSums((ind.rec - outer(rec, rep(1, ncol(ind.rec))))^2, na.rm = T)
var.ind.rec <- 1/ncol(ind.rec) * rowSums((ind.rec - outer(rec, rep(1, ncol(ind.rec))))^2, na.rm = T)
plot(population$Rec[9:30] ~ rec[9:30]); abline(0,1)
plot(population$Rec[9:30] ~ rec[9:30]); abline(0,1)
segments(population$Rec[9:30], rec[9:30] + sqrt(var.ind.rec), population$Rec[9:30], rec[9:30] - sqrt(var.ind.rec))
plot(population$Rec[9:30] ~ rec[9:30]); abline(0,1)
segments(population$Rec[9:30], rec[9:30] + sqrt(var.ind.rec[9:30]), population$Rec[9:30], rec[9:30] - sqrt(var.ind.rec[9:30]))
plot(population$Rec[9:30], rec[9:30]); abline(0,1)
segments(population$Rec[9:30], rec[9:30] + sqrt(var.ind.rec[9:30]), population$Rec[9:30], rec[9:30] - sqrt(var.ind.rec[9:30]))
q()
rm(list = ls())
library(SAFR); example(llfunc7)
q()
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
q()
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
cbind(rec[9:30}, sqrt(var.ind.rec[9:30]))
cbind(rec[9:30], sqrt(var.ind.rec[9:30]))
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
plot(1:22, population$Rec[9:30])
plot(1:22, population$Rec[9:30], type = "b")
points(1:22, rec[9:30], type = "b", pch = 19)
q()
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
q()
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
plot(1:22, population$Rec[9:30], type = "b", ylim = c(0.9 * min(c(rec[9:30], population$Rec[9:30])), 1.1 * max(c(rec[9:30], population$Rec[9:30])))
points(1:22, rec[9:30], type = "b", pch = 19)
plot(1:22, population$Rec[9:30], type = "b", ylim = c(0.9 * min(c(rec[9:30], population$Rec[9:30]))), 1.1 * max(c(rec[9:30], population$Rec[9:30])))
(0.9 * min(c(rec[9:30], population$Rec[9:30]))), 1.1 * max(c(rec[9:30], population$Rec[9:30]))
c(0.9 * min(c(rec[9:30], population$Rec[9:30]))), 1.1 * max(c(rec[9:30], population$Rec[9:30])))
c(0.9 * min(c(rec[9:30], population$Rec[9:30])), 1.1 * max(c(rec[9:30], population$Rec[9:30])))
plot(1:22, population$Rec[9:30], type = "b", ylim = c(0.9 * min(c(rec[9:30], population$Rec[9:30])), 1.1 * max(c(rec[9:30], population$Rec[9:30]))))
points(1:22, rec[9:30], type = "b", pch = 19)
q()
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
library(SAFR); example(llfunc7)
q()
library(SAFR)
example("llfunc7")
library(SAFR)
ls
example("llfunc7")
p
dim(p)
p[1,9]
rowSums(p)
p[1,]
library(SAFR); example(llfunc7)
example(llfunc7)
example(llfunc7)
example(llfunc7)
example(llfunc7)
